#!/bin/bash

filename="./time_tracking.txt"

function seconds_to_time {
  seconds="$1"
  hours=$((seconds/3600))
  minutes=$((seconds%3600/60))
  seconds=$((seconds%60))
  printf "%02d:%02d:%02d" $hours $minutes $seconds
}

function print_task {
  last_task_time="$1"
  current_task_time="$2"
  task_name="$3"
  duration=$((current_task_time-last_task_time))

  printf "%s" "$(date -d "@$last_task_time" +%F\ %T)"
  printf "  "
  printf "%s" "$(seconds_to_time $duration)"
  printf "  "
  printf "%s" "$task_name"
  echo
}

function show_tasks {
  last_task_time=""
  last_task_name=""

  while read -r line; do
    new_task_time=$(echo "$line" | cut -f1)
    new_task_name=$(echo "$line" | cut -f2-)

    if [ -n "$last_task_time" ]; then
      print_task "$last_task_time" "$new_task_time" "$last_task_name"
    fi

    last_task_time="$new_task_time"
    last_task_name="$new_task_name"
  done < "$filename"

  print_task "$last_task_time" "$(date +%s)" "$last_task_name"
}

if [ $# -eq 0 ]; then
  show_tasks
  exit 0
fi

case "$1" in
  help)
    echo "Usage: $0 <command>"
    echo "Commands:"
    echo "  add <task>"
    echo "  show"
    echo "  summary <date> (default: today, e.g. 15 minutes ago, 10:00, etc...)"
    echo "  last"
    echo "  edit"
    echo "  watch <n>"
    echo "  help"
    ;;
  add)
    if [ $# -ne 2 ]; then
      echo "Usage: $0 add <task>"
      exit 1
    fi
    echo "$(date +%s)	$2" >> "$filename"
    ;;
  show)
    show_tasks
    ;;
  summary)
    cutoff=$(date +%s -d "today 00:00")

    if [ $# -eq 2 ]; then
      cutoff=$(date +%s -d "$2")
    fi

    echo "Summary since $(date -d "@$cutoff" +%F\ %T):"

    waste='youtube';
    good='work|programming|exercise|read|social|clean|org';
    ignore='sleep';

    awk -F'\t' -v cutoff="$cutoff" '
      BEGIN {
        last_time = 0
        last_task = ""
      }
      {
        if (last_time != 0) {
          current_time = $1
          duration = current_time - last_time

          if (last_time > cutoff && current_time > cutoff) {
            tasks[last_task] += duration
          } else if (last_time < cutoff && current_time > cutoff) {
            tasks[last_task] += current_time - cutoff
          } else if (last_time > cutoff && current_time < cutoff) {
            tasks[last_task] += cutoff - last_time
          } else {
          }
        }
        last_time = $1
        last_task = $2
      }
      END {
        waste = 0
        good = 0
        waste_tasks = "'"$waste"'"
        good_tasks = "'"$good"'"
        ignore_tasks = "'"$ignore"'"
        current_time = systime()
        duration = current_time - last_time
        tasks[last_task] += duration

        total = 0
        for (task in tasks) {
          if (match(task, ignore_tasks)) {
            continue
          }
          total += tasks[task]
        }

        n=asorti(tasks, sorted_tasks)
        for (task in sorted_tasks) {
          task = sorted_tasks[task]
          if(match(task, waste_tasks)) {
            printf "\033[0;31m"
          } else if(match(task, good_tasks)) {
            printf "\033[0;32m"
          } else if(match(task, ignore_tasks)) {
            continue
          }

          printf " "
          printf "%s", strftime("%H:%M:%S", tasks[task], 1)
          printf " "
          printf "%4.1f%%", tasks[task] / total * 100
          printf "\n"
        }
      }' "$filename"
    ;;
  last)
    last_line=$(tail -n 1 "$filename")
    last_task_time=$(echo "$last_line" | cut -f1)
    last_task_name=$(echo "$last_line" | cut -f2-)
    duration=$(( $(date +%s) - last_task_time ))

    printf "%s" "$last_task_name"
    printf " "
    printf "%s" "$(seconds_to_time $duration)"
    echo
    ;;
  edit)
    $EDITOR "$filename"
    ;;
  watch)
    n=1

    if [ $# -eq 2 ]; then
      n="$2"
    fi

    watch -c -n "$n" "$0 summary"
    ;;
  *)
    echo "Invalid command"
    exit 1
    ;;
esac
