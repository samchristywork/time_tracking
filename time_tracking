#!/bin/bash

filename="./time_tracking.txt"

function seconds_to_time {
  seconds="$1"
  hours=$((seconds/3600))
  minutes=$((seconds%3600/60))
  seconds=$((seconds%60))

  if [ $hours -gt 24 ]; then
    days=$((hours/24))
    hours=$((hours%24))
    printf "%d:" $days
  fi

  printf "%02d:%02d:%02d" $hours $minutes $seconds
}

function print_task {
  last_task_time="$1"
  current_task_time="$2"
  task_name="$3"
  duration=$((current_task_time-last_task_time))

  printf "%s" "$(date -d "@$last_task_time" +%F\ %T)"
  printf "  "
  printf "%s" "$(seconds_to_time $duration)"
  printf "  "
  printf "%s" "$task_name"
  echo
}

function show_tasks {
  pattern=""
  if [ $# -eq 1 ]; then
    pattern="$1"
  fi

  last_task_time=""
  last_task_name=""

  total_time=0
  matched_time=0

  while read -r line; do
    new_task_time=$(echo "$line" | cut -f1)
    new_task_name=$(echo "$line" | cut -f2-)

    matchespattern=1
    if [ -n "$pattern" ]; then
      if ! echo "$last_task_name" | grep -q "$pattern"; then
        matchespattern=0
      fi
    fi

    if [ -n "$last_task_time" ] && [ $matchespattern -eq 1 ]; then
      print_task "$last_task_time" "$new_task_time" "$last_task_name"
      matched_time=$((matched_time+new_task_time-last_task_time))
    fi
    if [ -n "$last_task_time" ]; then
      total_time=$((total_time+new_task_time-last_task_time))
    fi

    last_task_time="$new_task_time"
    last_task_name="$new_task_name"
  done < "$filename"

  matchespattern=1
  if [ -n "$pattern" ]; then
    if ! echo "$last_task_name" | grep -q "$pattern"; then
      matchespattern=0
    fi
  fi
  if [ $matchespattern -eq 1 ]; then
    print_task "$last_task_time" "$(date +%s)" "$last_task_name"
    matched_time=$((matched_time+$(date +%s)-last_task_time))
  fi
  total_time=$((total_time+$(date +%s)-last_task_time))

  printf "Total: %s\n" "$(seconds_to_time $total_time)"
  if [ -n "$pattern" ]; then
    printf "Matched: %s\n" "$(seconds_to_time $matched_time)"
    printf "Percent: %s%%\n" "$((matched_time*100/total_time))"
    printf "Per day: %s\n" "$(seconds_to_time $((matched_time*86400/total_time)))"
  fi
}

if [ $# -eq 0 ]; then
  show_tasks
  exit 0
fi

case "$1" in
  help)
    echo "Usage: $0 <command>"
    echo "Commands:"
    echo "  add <task> - add a new task"
    echo "  show - show all tasks"
    echo "  search <pattern> - search for a task"
    echo "  summary <date> (default: today, e.g. 15 minutes ago, 10:00, etc...)"
    echo "  last - show last task"
    echo "  edit - edit the task file"
    echo "  watch <n> - watch the task file for changes"
    echo "  help - show this help"
    ;;
  add)
    if [ $# -ne 2 ]; then
      echo "Usage: $0 add <task>"
      exit 1
    fi
    echo "$(date +%s)	$2" >> "$filename"
    ;;
  show)
    show_tasks
    ;;
  search)
    if [ $# -ne 2 ]; then
      echo "Usage: $0 search <pattern>"
      exit 1
    fi

    show_tasks "$2"
    ;;
  summary)
    cutoff=$(date +%s -d "today 00:00")

    if [ $# -eq 2 ]; then
      cutoff=$(date +%s -d "$2")
    fi

    echo "Summary since $(date -d "@$cutoff" +%F\ %T):"

    waste='television|youtube';
    good='work|programming|exercise|read|social|clean|org';
    ignore='sleep';

    awk -F'\t' -v cutoff="$cutoff" '
      BEGIN {
        last_time = 0
        last_task = ""
      }
      {
        if (last_time != 0) {
          current_time = $1
          duration = current_time - last_time

          if (last_time > cutoff && current_time > cutoff) {
            tasks[last_task] += duration
          } else if (last_time < cutoff && current_time > cutoff) {
            tasks[last_task] += current_time - cutoff
          } else if (last_time > cutoff && current_time < cutoff) {
            tasks[last_task] += cutoff - last_time
          } else {
          }
        }
        last_time = $1
        last_task = $2
      }
      END {
        waste = 0
        good = 0
        waste_tasks = "'"$waste"'"
        good_tasks = "'"$good"'"
        ignore_tasks = "'"$ignore"'"
        current_time = systime()
        duration = current_time - last_time
        tasks[last_task] += duration

        total = 0
        for (task in tasks) {
          if (match(task, ignore_tasks)) {
            continue
          }
          total += tasks[task]
        }

        n=asorti(tasks, sorted_tasks)
        for (task in sorted_tasks) {
          task = sorted_tasks[task]
          if(match(task, waste_tasks)) {
            printf "\033[0;31m"
            waste += tasks[task]
          } else if(match(task, good_tasks)) {
            printf "\033[0;32m"
            good += tasks[task]
          } else if(match(task, ignore_tasks)) {
            continue
          }

          if (task == last_task) {
            printf "> "
          }else {
            printf "  "
          }

          printf "%s", strftime("%H:%M:%S", tasks[task], 1)
          printf " "
          printf "%4.1f%%", tasks[task] / total * 100
          printf " "
          printf "%s", task
          printf "\033[0m\n"
        }

        if (total != 0) {
          print ""
          printf "Waste: %s (%4.1f%%)\n", strftime("%H:%M:%S", waste, 1), waste / total * 100
          printf "Good:  %s (%4.1f%%)\n", strftime("%H:%M:%S", good, 1), good / total * 100
        }
      }' "$filename"
    ;;
  last)
    last_line=$(tail -n 1 "$filename")
    last_task_time=$(echo "$last_line" | cut -f1)
    last_task_name=$(echo "$last_line" | cut -f2-)
    duration=$(( $(date +%s) - last_task_time ))

    printf "%s" "$last_task_name"
    printf " "
    printf "%s" "$(seconds_to_time $duration)"
    echo
    ;;
  edit)
    $EDITOR "$filename"
    ;;
  watch)
    n=1

    if [ $# -eq 2 ]; then
      n="$2"
    fi

    watch -c -n "$n" "$0 summary"
    ;;
  *)
    echo "Invalid command"
    exit 1
    ;;
esac
