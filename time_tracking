#!/bin/bash

filename="./time_tracking.txt"
waste='_television_youtube_';
good='_work_programming_exercise_read_social_clean_org_meditate_';
ignore='_sleep_';

function seconds_to_time {
  seconds="$1"
  hours=$((seconds/3600))
  minutes=$((seconds%3600/60))
  seconds=$((seconds%60))

  if [ $hours -gt 24 ]; then
    days=$((hours/24))
    hours=$((hours%24))
    printf "%d:" $days
  fi

  printf "%02d:%02d:%02d" $hours $minutes $seconds
}

function print_task {
  last_task_time="$1"
  current_task_time="$2"
  task_name="$3"
  duration=$((current_task_time-last_task_time))

  printf "%s" "$(date -d "@$last_task_time" +%F\ %T)"
  printf "  "
  printf "%s" "$(seconds_to_time $duration)"
  printf "  "
  printf "%s" "$task_name"
  echo
}

function show_tasks {
  awk -F'\t' '
    BEGIN {
      OFS = "\t"
      total_duration = 0
    }
    {
      datetime = $2
      duration_seconds = $3
      duration_human = $4
      task_name = $5
      print datetime, duration_human, task_name
      total_duration += duration_seconds
    }
    END {
      days = int(total_duration / 86400)
      if (days > 0) {
        print "Total: "days":"strftime("%H:%M:%S", total_duration, 1)
      } else {
        print "Total: "strftime("%H:%M:%S", total_duration, 1)
      }
    }
  ' | column -t -s $'\t'
}

if [ $# -eq 0 ]; then
  "$0" preprocess | show_tasks
  exit 0
fi

function usage {
  echo "Usage: $0 <command>"
  echo "Commands:"
  echo "  add <task> - add a new task"
  echo "  show - show last ten tasks"
  echo "  search <pattern> - search for a task"
  echo "  summary <date> <date> - show summary for a date range"
  echo "  last - show last task"
  echo "  edit - edit the task file"
  echo "  yesterday - show summary for yesterday"
  echo "  preprocess - preprocess the task file"
  echo "  watch <n> - watch the task file for changes"
  echo "  help - show this help"
}

case "$1" in
  help)
    usage
    ;;
  add)
    if [ $# -ne 2 ]; then
      echo "Usage: $0 add <task>"
      exit 1
    fi
    echo "$(date +%s)	$2" >> "$filename"
    ;;
  show)
    "$0" preprocess | tail | show_tasks
    ;;
  search)
    if [ $# -ne 2 ]; then
      echo "Usage: $0 search <pattern>"
      exit 1
    fi

    show_tasks "$2" < "$filename"
    ;;
  summary)
    low_cutoff=$(date +%s -d "today 00:00")
    high_cutoff=$(date +%s -d "now")

    if [ $# -eq 2 ]; then
      low_cutoff=$(date +%s -d "$2")
    elif [ $# -eq 3 ]; then
      low_cutoff=$(date +%s -d "$2")
      high_cutoff=$(date +%s -d "$3")
    fi

    echo "Summary between $(date -d "@$low_cutoff" +%F\ %T) and $(date -d "@$high_cutoff" +%F\ %T):"

    awk -F'\t' -v low_cutoff="$low_cutoff" -v high_cutoff="$high_cutoff" '
      BEGIN {
        last_time = 0
        last_task = ""
      }
      {
        if (last_time != 0) {
          current_time = $1

          duration = current_time - last_time
          slice_start = last_time
          slice_end = slice_start + duration

          if (slice_start < low_cutoff) {
            slice_start = low_cutoff
          }

          if (slice_end > high_cutoff) {
            slice_end = high_cutoff
          }

          if (slice_start < slice_end) {
            tasks[last_task] += slice_end - slice_start
          }
        }
        last_time = $1
        last_task = $2
      }
      END {
        waste = 0
        good = 0
        waste_tasks = "'"$waste"'"
        good_tasks = "'"$good"'"
        ignore_tasks = "'"$ignore"'"
        current_time = systime()

        duration = current_time - last_time
        slice_start = last_time
        slice_end = slice_start + duration

        if (slice_start < low_cutoff) {
          slice_start = low_cutoff
        }

        if (slice_end > high_cutoff) {
          slice_end = high_cutoff
        }

        if (slice_start < slice_end) {
          tasks[last_task] += slice_end - slice_start
        }

        total = 0
        for (task in tasks) {
          if (match(task, ignore_tasks)) {
            continue
          }
          total += tasks[task]
        }

        n = asorti(tasks, sorted_tasks)
        for (task in sorted_tasks) {
          task = sorted_tasks[task]
          if(match(waste_tasks, "_"task"_")) {
            printf "\033[0;31m"
            waste += tasks[task]
          } else if(match(good_tasks, "_"task"_")) {
            printf "\033[0;32m"
            good += tasks[task]
          } else if(match(ignore_tasks, "_"task"_")) {
            continue
          }

          if (task == last_task) {
            printf "> "
          }else {
            printf "  "
          }

          printf "%s", strftime("%H:%M:%S", tasks[task], 1)
          printf " "
          printf "%4.1f%%", tasks[task] / total * 100
          printf " "
          printf "%s", task
          printf "\033[0m\n"
        }

        if (total != 0) {
          print ""
          printf "Waste: %s (%4.1f%%)\n", strftime("%H:%M:%S", waste, 1), waste / total * 100
          printf "Good:  %s (%4.1f%%)\n", strftime("%H:%M:%S", good, 1), good / total * 100
        }
      }' "$filename"
    ;;
  last)
    last_line=$(tail -n 1 "$filename")
    last_task_time=$(echo "$last_line" | cut -f1)
    last_task_name=$(echo "$last_line" | cut -f2-)
    duration=$(( $(date +%s) - last_task_time ))

    printf "%s" "$last_task_name"
    printf " "
    printf "%s" "$(seconds_to_time $duration)"
    echo
    ;;
  edit)
    $EDITOR "$filename"
    ;;
  yesterday)
    current_epoch=$(date +%s -d "today 00:00")
    yesterday_epoch=$((current_epoch-86400))
    $0 summary "$(date -d "@$yesterday_epoch" +%F)" "$(date -d "@$current_epoch" +%F)"
    ;;
  preprocess)
    awk -F'\t' '
    BEGIN {
      last_epoch = 0
      last_datetime = ""
      last_duration = 0
      last_task = ""
      OFS = "\t"
    }
    {
      epoch = $1
      duration = epoch - last_epoch
      datetime = strftime("%F %T", epoch)
      task = $2

      duration_human_readable = strftime("%H:%M:%S", duration, 1)

      if (last_epoch != 0) {
        print last_epoch, last_datetime, duration, duration_human_readable, last_task
      }

      last_epoch = epoch
      last_datetime = datetime
      last_duration = duration
      last_task = task
    }
    END {
      epoch = $1
      current_time = systime()
      duration = current_time - epoch
      datetime = strftime("%F %T", epoch)
      task = $2
      print epoch, datetime, duration, strftime("%H:%M:%S", duration, 1), task
    }
    ' "$filename"
    ;;
  watch)
    n=1

    if [ $# -eq 2 ]; then
      n="$2"
    fi

    watch -c -n "$n" "$0 summary"
    ;;
  *)
    echo "Invalid command"
    usage
    exit 1
    ;;
esac
